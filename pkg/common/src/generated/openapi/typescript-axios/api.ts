/* tslint:disable */
/* eslint-disable */
/**
 * Scout API
 * API for managing scout records.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Scout
 */
export interface Scout {
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'last_name': string;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'birth_year': number;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'email_1': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'phone_number_1': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'troop_name': string;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'troop_number': number;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'troop_url': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'rank': string;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'been_to_jubilee': number;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'jubilee_participant_years_csv'?: string;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_set_fire': number;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_carve_wood': number;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_train_others': number;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_make_sausage': number;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_lead_campfire': number;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_first_aid': number;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'can_cook': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new scout
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScout: async (scout: Scout, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scout' is not null or undefined
            assertParamExists('createScout', 'scout', scout)
            const localVarPath = `/api/v1/scouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a scout by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScout: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteScout', 'id', id)
            const localVarPath = `/api/v1/scouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a scout by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScoutById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScoutById', 'id', id)
            const localVarPath = `/api/v1/scouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all scouts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScouts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/scouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a scout by ID
         * @param {string} id 
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScout: async (id: string, scout: Scout, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateScout', 'id', id)
            // verify required parameter 'scout' is not null or undefined
            assertParamExists('updateScout', 'scout', scout)
            const localVarPath = `/api/v1/scouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new scout
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScout(scout: Scout, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScout(scout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createScout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a scout by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScout(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScout(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteScout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a scout by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScoutById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScoutById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScoutById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all scouts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScouts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scout>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScouts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScouts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a scout by ID
         * @param {string} id 
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScout(id: string, scout: Scout, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScout(id, scout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateScout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new scout
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScout(scout: Scout, options?: any): AxiosPromise<Scout> {
            return localVarFp.createScout(scout, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a scout by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScout(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScout(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a scout by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScoutById(id: string, options?: any): AxiosPromise<Scout> {
            return localVarFp.getScoutById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all scouts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScouts(options?: any): AxiosPromise<Array<Scout>> {
            return localVarFp.getScouts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a scout by ID
         * @param {string} id 
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScout(id: string, scout: Scout, options?: any): AxiosPromise<Scout> {
            return localVarFp.updateScout(id, scout, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new scout
     * @param {Scout} scout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createScout(scout: Scout, options?: RawAxiosRequestConfig): AxiosPromise<Scout>;

    /**
     * 
     * @summary Delete a scout by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteScout(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a scout by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getScoutById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Scout>;

    /**
     * 
     * @summary Get all scouts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getScouts(options?: RawAxiosRequestConfig): AxiosPromise<Array<Scout>>;

    /**
     * 
     * @summary Update a scout by ID
     * @param {string} id 
     * @param {Scout} scout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateScout(id: string, scout: Scout, options?: RawAxiosRequestConfig): AxiosPromise<Scout>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new scout
     * @param {Scout} scout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createScout(scout: Scout, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createScout(scout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a scout by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteScout(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteScout(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a scout by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScoutById(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScoutById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all scouts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScouts(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScouts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a scout by ID
     * @param {string} id 
     * @param {Scout} scout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateScout(id: string, scout: Scout, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateScout(id, scout, options).then((request) => request(this.axios, this.basePath));
    }
}



