/* tslint:disable */
/* eslint-disable */
/**
 * Scout API
 * API for managing scout records.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetScoutsV1200Response
 */
export interface GetScoutsV1200Response {
    /**
     * 
     * @type {Array<Scout>}
     * @memberof GetScoutsV1200Response
     */
    'data': Array<Scout>;
    /**
     * 
     * @type {GetScoutsV1200ResponseSorting}
     * @memberof GetScoutsV1200Response
     */
    'sorting': GetScoutsV1200ResponseSorting;
    /**
     * 
     * @type {GetScoutsV1200ResponsePagination}
     * @memberof GetScoutsV1200Response
     */
    'pagination': GetScoutsV1200ResponsePagination;
}
/**
 * 
 * @export
 * @interface GetScoutsV1200ResponsePagination
 */
export interface GetScoutsV1200ResponsePagination {
    /**
     * 
     * @type {number}
     * @memberof GetScoutsV1200ResponsePagination
     */
    'totalRecords': number;
    /**
     * 
     * @type {number}
     * @memberof GetScoutsV1200ResponsePagination
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof GetScoutsV1200ResponsePagination
     */
    'currentPage': number;
    /**
     * 
     * @type {number}
     * @memberof GetScoutsV1200ResponsePagination
     */
    'pageSize': number;
}
/**
 * 
 * @export
 * @interface GetScoutsV1200ResponseSorting
 */
export interface GetScoutsV1200ResponseSorting {
    /**
     * 
     * @type {string}
     * @memberof GetScoutsV1200ResponseSorting
     */
    'sortDirection': GetScoutsV1200ResponseSortingSortDirectionEnum;
    /**
     * 
     * @type {string}
     * @memberof GetScoutsV1200ResponseSorting
     */
    'sortFieldName': string;
}

export const GetScoutsV1200ResponseSortingSortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type GetScoutsV1200ResponseSortingSortDirectionEnum = typeof GetScoutsV1200ResponseSortingSortDirectionEnum[keyof typeof GetScoutsV1200ResponseSortingSortDirectionEnum];

/**
 * 
 * @export
 * @interface GetScoutsV1500Response
 */
export interface GetScoutsV1500Response {
    /**
     * 
     * @type {string}
     * @memberof GetScoutsV1500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RankLongName = {
    /**
    * KOV - Kiscserkész Őrs Vezető
    */
    KOV: 'KOV - Kiscserkész Őrs Vezető',
    /**
    * OV - Őrs Vezető
    */
    OV: 'OV - Őrs Vezető',
    /**
    * KST - Kiscserkész Segéd Tiszt
    */
    KST: 'KST - Kiscserkész Segéd Tiszt',
    /**
    * ST - Segéd Tiszt
    */
    ST: 'ST - Segéd Tiszt',
    /**
    * T - Tiszt
    */
    T: 'T - Tiszt'
} as const;

export type RankLongName = typeof RankLongName[keyof typeof RankLongName];


/**
 * 
 * @export
 * @interface Scout
 */
export interface Scout {
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'last_name': string;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'birth_year': number;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'email_1': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'phone_number_1': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'troop_name': string;
    /**
     * 
     * @type {number}
     * @memberof Scout
     */
    'troop_number': number;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'troop_url': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'rank': ScoutRankEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'been_to_jubilee': ScoutBeenToJubileeEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_set_fire': ScoutCanSetFireEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_carve_wood': ScoutCanCarveWoodEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_train_others': ScoutCanTrainOthersEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_make_sausage': ScoutCanMakeSausageEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_lead_campfire': ScoutCanLeadCampfireEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_first_aid': ScoutCanFirstAidEnum;
    /**
     * 
     * @type {string}
     * @memberof Scout
     */
    'can_cook': ScoutCanCookEnum;
}

export const ScoutRankEnum = {
    /**
    * KOV - Kiscserkész Őrs Vezető
    */
    KOV: 'KOV',
    /**
    * OV - Őrs Vezető
    */
    OV: 'OV',
    /**
    * KST - Kiscserkész Segéd Tiszt
    */
    KST: 'KST',
    /**
    * ST - Segéd Tiszt
    */
    ST: 'ST',
    /**
    * T - Tiszt
    */
    T: 'T'
} as const;

export type ScoutRankEnum = typeof ScoutRankEnum[keyof typeof ScoutRankEnum];
export const ScoutBeenToJubileeEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutBeenToJubileeEnum = typeof ScoutBeenToJubileeEnum[keyof typeof ScoutBeenToJubileeEnum];
export const ScoutCanSetFireEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanSetFireEnum = typeof ScoutCanSetFireEnum[keyof typeof ScoutCanSetFireEnum];
export const ScoutCanCarveWoodEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanCarveWoodEnum = typeof ScoutCanCarveWoodEnum[keyof typeof ScoutCanCarveWoodEnum];
export const ScoutCanTrainOthersEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanTrainOthersEnum = typeof ScoutCanTrainOthersEnum[keyof typeof ScoutCanTrainOthersEnum];
export const ScoutCanMakeSausageEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanMakeSausageEnum = typeof ScoutCanMakeSausageEnum[keyof typeof ScoutCanMakeSausageEnum];
export const ScoutCanLeadCampfireEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanLeadCampfireEnum = typeof ScoutCanLeadCampfireEnum[keyof typeof ScoutCanLeadCampfireEnum];
export const ScoutCanFirstAidEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanFirstAidEnum = typeof ScoutCanFirstAidEnum[keyof typeof ScoutCanFirstAidEnum];
export const ScoutCanCookEnum = {
    True: 'TRUE',
    False: 'FALSE'
} as const;

export type ScoutCanCookEnum = typeof ScoutCanCookEnum[keyof typeof ScoutCanCookEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new scout
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScout: async (scout: Scout, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scout' is not null or undefined
            assertParamExists('createScout', 'scout', scout)
            const localVarPath = `/api/v1/scouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated scout records
         * @param {number} page Page number for pagination (default is 1)
         * @param {number} pageSize Number of records per page (default is 10)
         * @param {string} [sortFieldName] The name of the column in the SQL database table to sort the results based on.
         * @param {GetScoutsV1SortDirectionEnum} [sortDirection] The direction in which the retrieved data should be sorted. Defaults to ascending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScoutsV1: async (page: number, pageSize: number, sortFieldName?: string, sortDirection?: GetScoutsV1SortDirectionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getScoutsV1', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getScoutsV1', 'pageSize', pageSize)
            const localVarPath = `/api/v1/scouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortFieldName !== undefined) {
                localVarQueryParameter['sortFieldName'] = sortFieldName;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new scout
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScout(scout: Scout, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScout(scout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createScout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get paginated scout records
         * @param {number} page Page number for pagination (default is 1)
         * @param {number} pageSize Number of records per page (default is 10)
         * @param {string} [sortFieldName] The name of the column in the SQL database table to sort the results based on.
         * @param {GetScoutsV1SortDirectionEnum} [sortDirection] The direction in which the retrieved data should be sorted. Defaults to ascending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScoutsV1(page: number, pageSize: number, sortFieldName?: string, sortDirection?: GetScoutsV1SortDirectionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScoutsV1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScoutsV1(page, pageSize, sortFieldName, sortDirection, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScoutsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new scout
         * @param {Scout} scout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScout(scout: Scout, options?: any): AxiosPromise<Scout> {
            return localVarFp.createScout(scout, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated scout records
         * @param {number} page Page number for pagination (default is 1)
         * @param {number} pageSize Number of records per page (default is 10)
         * @param {string} [sortFieldName] The name of the column in the SQL database table to sort the results based on.
         * @param {GetScoutsV1SortDirectionEnum} [sortDirection] The direction in which the retrieved data should be sorted. Defaults to ascending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScoutsV1(page: number, pageSize: number, sortFieldName?: string, sortDirection?: GetScoutsV1SortDirectionEnum, options?: any): AxiosPromise<GetScoutsV1200Response> {
            return localVarFp.getScoutsV1(page, pageSize, sortFieldName, sortDirection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new scout
     * @param {Scout} scout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createScout(scout: Scout, options?: RawAxiosRequestConfig): AxiosPromise<Scout>;

    /**
     * 
     * @summary Get paginated scout records
     * @param {number} page Page number for pagination (default is 1)
     * @param {number} pageSize Number of records per page (default is 10)
     * @param {string} [sortFieldName] The name of the column in the SQL database table to sort the results based on.
     * @param {GetScoutsV1SortDirectionEnum} [sortDirection] The direction in which the retrieved data should be sorted. Defaults to ascending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getScoutsV1(page: number, pageSize: number, sortFieldName?: string, sortDirection?: GetScoutsV1SortDirectionEnum, options?: RawAxiosRequestConfig): AxiosPromise<GetScoutsV1200Response>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new scout
     * @param {Scout} scout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createScout(scout: Scout, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createScout(scout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated scout records
     * @param {number} page Page number for pagination (default is 1)
     * @param {number} pageSize Number of records per page (default is 10)
     * @param {string} [sortFieldName] The name of the column in the SQL database table to sort the results based on.
     * @param {GetScoutsV1SortDirectionEnum} [sortDirection] The direction in which the retrieved data should be sorted. Defaults to ascending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScoutsV1(page: number, pageSize: number, sortFieldName?: string, sortDirection?: GetScoutsV1SortDirectionEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScoutsV1(page, pageSize, sortFieldName, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetScoutsV1SortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetScoutsV1SortDirectionEnum = typeof GetScoutsV1SortDirectionEnum[keyof typeof GetScoutsV1SortDirectionEnum];


